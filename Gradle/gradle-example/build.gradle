import java.util.concurrent.TimeUnit

/*
 * This build file was auto generated by running the Gradle 'init' task
 * by 'isaiah.cooper' at '3/9/14 9:19 PM' with Gradle 1.11
 *
 * For more details take a look at the Java Quickstart chapter in the Gradle
 * user guide available at http://gradle.org/docs/1.11/userguide/tutorial_java_projects.html
 *
 */

//One thing to know is passing in a system property from the command line it needs to look like -Dorg.gradle.project.<property_name>=<property_value>
apply plugin: 'java'

//The groovy plugin will also apply the java plugin. Read more at http://www.gradle.org/docs/current/userguide/tutorial_groovy_projects.html
apply plugin: 'groovy'

//Here you can specify the IDE that you will use and it will create tasks associated with it.
apply plugin: 'idea'

//This will force the tests to always execute by clearing out the test cache
test.dependsOn 'cleanTest'

repositories {
    mavenCentral()
}

dependencies {
    //There are 2 ways to list the dependency information.  This way is the short cut
    compile 'ch.qos.logback:logback-classic:1.1.1'

    //Groovy information to compile groovy code
    compile 'org.codehaus.groovy:groovy-all:2.2.0'

    //Needed to help with injections for TestNG listeners
    compile 'com.google.inject:guice:3.0'

    //This way is the long cut
    //This is the TestNG test execution library that is better than JUnit
    //Adding a + for a version number means get the latest number for that version.  So in this case get the latest 6.8.whatever deployment
    testCompile group: 'org.testng', name: 'testng', version: '6.8.+'

    //An assertion library that is better than JUnit defaults
    testCompile 'org.easytesting:fest-assert-core:2.0M10'

    //Better reporting for testng.  It outputs a nice html report
    testCompile 'org.uncommons:reportng:1.1.4'

}

//Sample task that will be recorded in the gradle tasks call.  Calling this task will print out Hello World!
task hello << {
    println 'Hello World!'
}

//Example customization of MANIFEST.MF
version = '1.0'
jar {
    manifest {
        attributes 'Implementation-Title': 'Gradle Example', 'Implementation-Version':version
    }
}

//Setup the test task
test {
    useTestNG() {

    //Here is where you can add listeners for testng and add the reporting for reportng
        listeners << 'org.uncommons.reportng.HTMLReporter'
        listeners << 'org.uncommons.reportng.JUnitXMLReporter'

        //The variables are stored in the gradle.properties file.  excludedGroups has a default and can be passed in.  includedGroups has default of empty and can be passed in.
        // If includedGroups is empty it will execute all tests that aren't in the excluded groups
        excludeGroups << excludedGroups
        includeGroups << includedGroups
    }

    //Disable the default groovy html reports since ReportNG is being used
    reports.html.enabled = false

    //Interceptors
    beforeTest { desc ->
       println "\n*** Starting execution of test ${desc.className}.${desc.name} ***"
    }
    afterTest { descriptor, result ->
        println "<<< Test ${descriptor.name} resulted in ${result.resultType} and took "+getElaspedTime(result.endTime - result.startTime)+" >>>\n"
    }

    //Modify the test logging
    testLogging {
        showStandardStreams = true
        exceptionFormat "full"
    }
}

//Example of being able to use methods inside the build file
def getElaspedTime(def time) {

    if(time / 1000 < 1)
    {
        return String.format("0 min, %.3f sec", time/1000)
    }
    else
    {
        return String.format("%d min, %d sec",
                TimeUnit.MILLISECONDS.toMinutes(time),
                TimeUnit.MILLISECONDS.toSeconds(time) -
                        TimeUnit.MINUTES.toSeconds(TimeUnit.MILLISECONDS.toMinutes(time))

        )
    }
}




